// Explanation getRandomValue()
// 1. Added async at the begining of the function to create a promise.
// 2. Used the Math.random() to generate a random integer between 0 and 1.
// 3. Used a catch() to handle an error if promise is rejected.

describe("getRandomValue", () => {
    const getRandomValue = async (min = 0, max = 1) => {
        return Math.random() * (max - min) + min;
    };
    getRandomValue()
        .then(value => value)
        .catch(err => console.log("this your err", err));

    it("returns a promise of a random integer", () => {
        getRandomValue().then(value => assert.isNumber(value));
    });
});

// Explanation getFourRandomValues()
// 1. Added async at begining of function to create a promise.
// 2. Created a numbers array with 4 empty index positions using the new Array() method.
// 3. Used a for loop to loop through 4 times and call getRandomValue() each time.
// 4. Values returned by the result of looping and calling getRandomValue are assigned to numbers array.

describe("getFourRandomValues", () => {
    const getFourRandomValues = async (min, max) => {
        var numbers = new Array(4);
        for (var i = 0; i < numbers.length; i++) {
            numbers[i] = getRandomValue(1, 4);
        }

        return numbers;
    };

    getFourRandomValues().then(numbers => {
        numbers;
    });

    it("returns an array of four integers, generated by getRandomValue()", () => {
        getFourRandomValues().then(values => assert.lengthOf(values, 4));
    });
});
